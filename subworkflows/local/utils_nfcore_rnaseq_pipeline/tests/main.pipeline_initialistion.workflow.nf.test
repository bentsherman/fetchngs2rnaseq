nextflow_workflow {

    name "Test Workflow PIPELINE_INITIALISATION"
    script "../main.nf"
    workflow "PIPELINE_INITIALISATION"

    test("test PIPELINE_INITIALISATION successfully completes with valid parameters") {

        when {
            params {
                // parameters copied from test profile.
                // We should be able to automatically import these somehow.
                input = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/samplesheet/v3.10/samplesheet_test.csv"

                // Genome references
                fasta              = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/genome.fasta"
                gtf                = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/genes_with_empty_tid.gtf.gz"
                gff                = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/genes.gff.gz"
                transcript_fasta   = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/transcriptome.fasta"
                additional_fasta   = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/gfp.fa.gz"

                bbsplit_fasta_list = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/bbsplit_fasta_list.txt"
                hisat2_index       = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/hisat2.tar.gz"
                salmon_index       = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/salmon.tar.gz"
                rsem_index         = "https://raw.githubusercontent.com/nf-core/test-datasets/7f1614baeb0ddf66e60be78c3d9fa55440465ac8/reference/rsem.tar.gz"

                // Other parameters
                skip_bbsplit        = false
                pseudo_aligner      = 'salmon'
                umitools_bc_pattern = 'NNNN'
                ribo_database_manifest = "${projectDir}/workflows/rnaseq/assets/rrna-db-defaults.txt"
            }
            workflow {
                """
                input[0] = false                               // version (boolean)
                input[1] = false                               // help (boolean)
                input[2] = "${projectDir}/nextflow_schema.json" // schema (string)
                input[3] = true                                // validate_parameters (boolean)
                input[4] = true                                // monochrome_logs (boolean)
                input[5] = args                                // args (array)
                input[6] = file("$outputDir")                   // outdir (string)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success}
            )
        }

    }

}
