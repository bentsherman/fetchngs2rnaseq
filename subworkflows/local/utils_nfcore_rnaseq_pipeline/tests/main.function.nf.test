nextflow_function {

    name "Test Functions"
    script "../main.nf"
    tag "UTILS_NFCORE_RNASEQ_PIPELINE"

    test("Test Function checkSamplesAfterGrouping success") {

        function "checkSamplesAfterGrouping"

        when {
            function {
                """
                input[0] = [
                    [],
                    [
                        [ id: 'test', strandedness: 'unstranded', single_end: true ],
                        [ id: 'test', strandedness: 'unstranded', single_end: true ]
                    ],
                    [
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function checkSamplesAfterGrouping invalid strandedness") {

        function "checkSamplesAfterGrouping"

        when {
            function {
                """
                input[0] = [
                    [],
                    [
                        [ id: 'test', strandedness: 'unstranded', single_end: true ],
                        [ id: 'test', strandedness: 'stranded', single_end: true ]
                    ],
                    [
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert function.failed },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function checkSamplesAfterGrouping invalid endedness") {

        function "checkSamplesAfterGrouping"

        when {
            function {
                """
                input[0] = [
                    [],
                    [
                        [ id: 'test', strandedness: 'unstranded', single_end: true ],
                        [ id: 'test', strandedness: 'unstranded', single_end: false ]
                    ],
                    [
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ],
                        [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert function.failed },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function validateInputParameters success") {
        // Needs more tests here to check for all options but there are a lot!

        function "validateInputParameters"

        when {
            params {
                fasta                  = "genome.fasta"
                gtf                    = "genome.gtf"
                gff                    = "genome.gff"
                transcript_fasta       = "transcripts.fasta"
                skip_bbsplit           = true
                bbsplit_fasta_list     = null
                remove_ribo_rna        = false
                ribo_database_manifest = null
                with_umi               = false
                skip_umi_extract       = false
                skip_alignment         = false
                aligner                = "star"
                skip_pseudo_alignment  = false
                pseudo_aligner         = "salmon"
                rsem_index             = "rsem_index"
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getGenomeAttribute finds attribute") {

        function "getGenomeAttribute"

        when {
            params {
                genome = "myTest"
                genomes {
                    "myTest" {
                        myAttribute = "myValue"
                    }
                }
            }
            function {
                """
                input[0] = "myAttribute"
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getGenomeAttribute missing attribute") {

        function "getGenomeAttribute"

        when {
            params {
                genome = "myTest"
                genomes {
                    "myTest" {
                        myAttribute = "myValue"
                    }
                }
            }
            function {
                """
                input[0] = "missingAttribute"
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function genomeExistsError finds genome") {

        function "genomeExistsError"

        when {
            params {
                genome = "myTest"
                genomes {
                    "myTest" {
                        myAttribute = "myValue"
                    }
                }
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function genomeExistsError missing genome") {

        function "genomeExistsError"

        when {
            params {
                genome = "missingTest"
                genomes {
                    "myTest" {
                        myAttribute = "myValue"
                    }
                }
            }
        }

        then {
            assertAll(
                { assert function.failed },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function toolCitationText") {

        function "toolCitationText"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function toolBibliographyText") {

        function "toolBibliographyText"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function gtfGffWarn") {

        function "gtfGffWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function ncbiGenomeWarn") {

        function "ncbiGenomeWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function ucscGenomeWarn") {

        function "ucscGenomeWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function transcriptsFastaWarn") {

        function "transcriptsFastaWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function skipAlignmentWarn") {

        function "skipAlignmentWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function rsemUmiError") {

        function "rsemUmiError"

        then {
            assertAll(
                { assert function.failed },
                { assert snapshot(function.result).match() }
            )
        }

    }



    test("Test Function rsemStarIndexWarn") {

        function "rsemStarIndexWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function rsemStarExtraArgumentsWarn") {

        function "rsemStarExtraArgumentsWarn"

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function additionaFastaIndexWarn") {

        function "additionaFastaIndexWarn"

        when {
            function {
                """
                input[0] = "mockIndex"
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function checkMaxContigSize") {

        function "checkMaxContigSize"

        when {
            function {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function multiqcTsvFromList") {

        function "multiqcTsvFromList"

        when {
            function {
                """
                // Create a TSV of one entry
                input[0] = [ 'test', 'value'    ]
                input[1] = [ 'id'  , 'attribute']
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }


    test("Test Function getSalmonInferredStrandedness unstranded") {

        function "getSalmonInferredStrandedness"

        when {
            function {
                """
                import groovy.json.JsonOutput

                def json_contents = JsonOutput.toJson([
                    library_types: [
                        "U"
                    ]
                ])
                def jsonFile = file("${workDir}/salmonUnstranded.json")
                jsonFile.write(json_contents)

                input[0] = jsonFile
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getSalmonInferredStrandedness forward") {

        function "getSalmonInferredStrandedness"

        when {
            function {
                """
                import groovy.json.JsonOutput

                def json_contents = JsonOutput.toJson([
                    library_types: [
                        "SF"
                    ]
                ])
                def jsonFile = file("${workDir}/salmonForward.json")
                jsonFile.write(json_contents)

                input[0] = jsonFile
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getSalmonInferredStrandedness reverse") {

        function "getSalmonInferredStrandedness"

        when {
            function {
                """
                import groovy.json.JsonOutput

                def json_contents = JsonOutput.toJson([
                    library_types: [
                        "SR"
                    ]
                ])
                def jsonFile = file("${workDir}/salmonReverse.json")
                jsonFile.write(json_contents)

                input[0] = jsonFile
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getStarPercentMapped pass") {

        function "getStarPercentMapped"

        when {
            function {
                """
                def alignLog = file("${workDir}/alignLog.txt")
                alignLog.write("Uniquely mapped reads % | 95.6%")

                input[0] = [
                    min_mapped_reads: 1.0
                ]
                input[1] = alignLog
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert function.result == [ 95.6, true ] }
            )
        }

    }

    test("Test Function getStarPercentMapped fail") {

        function "getStarPercentMapped"

        when {
            function {
                """
                def alignLog = file("${workDir}/alignLog.txt")
                alignLog.write("Uniquely mapped reads % | 10.2%")

                input[0] = [
                    min_mapped_reads: 50.0
                ]
                input[1] = alignLog
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert function.result == [ 10.2, false ] }
            )
        }

    }


    test("Test Function biotypeInGtf success") {

        function "biotypeInGtf"

        when {
            function {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                input[1] = "gene_biotype"
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function biotypeInGtf failed") {

        function "biotypeInGtf"

        when {
            function {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                input[1] = "NotAppearingInThisFile"
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }

    }

    test("Test Function getInferexperimentStrandedness") {

        function "getInferexperimentStrandedness"

        when {
            function {
                """
                def fileContents = [
                    'This is PairEnd Data',
                    'Fraction of reads failed to determine: 0.1565',
                    'Fraction of reads explained by "1++,1--,2+-,2-+": 0.0075',
                    'Fraction of reads explained by "1+-,1-+,2++,2--": 0.8361'
                ]
                def inferExperimentFile = file("${workDir}/inferExperimentFile.txt")
                inferExperimentFile.withWriter{ out ->
                    fileContents.each {out.println it}
                }

                input[0] = inferExperimentFile
                """
            }
        }

        then {
            assertAll(
                { assert function.success },
                { assert snapshot(function.result).match() }
            )
        }
    }
}
